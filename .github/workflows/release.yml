name: Release Build & Upload

on:
  push:
    tags:
      - 'v*' # Triggers the workflow on version tags (e.g., v1.0.0, v0.1.2)

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false          # Set to true if you want to manually publish the release
          prerelease: false     # Set to true if this is a pre-release

  build_tauri_desktop:
    name: Build Tauri Desktop Apps
    needs: create_release
    permissions:
      contents: write # Required to upload assets to the release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_desc: macos-intel
            platform: macos-13 # Intel-based macOS runner (Monterey)
          - os_desc: macos-arm
            platform: macos-14 # ARM-based macOS runner (Sonoma) - Apple Silicon
          - os_desc: ubuntu-latest
            platform: ubuntu-latest
          - os_desc: windows-latest
            platform: windows-latest
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update version in tauri.conf.json and Cargo.toml
        run: |
          # Extract version from tag (e.g., v1.0.44 -> 1.0.44)
          APP_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "Using App Version: $APP_VERSION"
          
          # Update tauri.conf.json
          # Using jq for robust JSON manipulation if available, otherwise sed
          if command -v jq &> /dev/null
          then
            jq ".version = \"$APP_VERSION\"" src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
            echo "Updated version in src-tauri/tauri.conf.json to $APP_VERSION using jq"
          else
            # Fallback to sed if jq is not available (less robust for complex JSON)
            sed -i.bak "s/\"version\": \".*\"/\"version\": \"$APP_VERSION\"/" src-tauri/tauri.conf.json
            echo "Updated version in src-tauri/tauri.conf.json to $APP_VERSION using sed (check for .bak file if issues)"
          fi
          
          # Update Cargo.toml
          # Using sed for TOML as it's simpler for this specific change
          sed -i.bak "s/^version = \".*\"/version = \"$APP_VERSION\"/" src-tauri/Cargo.toml
          echo "Updated version in src-tauri/Cargo.toml to $APP_VERSION using sed (check for .bak file if issues)"
        shell: bash

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Specify your project's Node.js version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # You can specify a specific Rust version if needed

      # Install Linux dependencies
      # macOS and Windows dependencies are usually handled by Tauri/system or pre-installed on runners
      - name: Install Linux dependencies (GTK, WebKit, AppIndicator, rsvg, FUSE, GStreamer, packaging tools, etc.)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            librsvg2-bin \
            patchelf \
            libfuse2 \
            desktop-file-utils \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-libav \
            libgdk-pixbuf2.0-bin \
            squashfs-tools \
            file \
            xdg-utils \
            appstream-util \
            ca-certificates \
            curl \
            wget \
            libssl-dev

      - name: Install frontend dependencies
        run: npm install # Or yarn install, or pnpm install

      - name: Build Tauri application (Windows/Linux using tauri-action)
        if: matrix.os_desc == 'ubuntu-latest' || matrix.os_desc == 'windows-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseId: ${{ needs.create_release.outputs.release_id }}
          projectPath: '.'

      - name: Build, Ad-hoc Sign, and Package macOS App
        if: matrix.os_desc == 'macos-intel' || matrix.os_desc == 'macos-arm'
        run: |
          echo "Starting macOS specific build process for ${{ matrix.os_desc }} on runner arch ${{ runner.arch }}..."
          # Build the .app bundle
          echo "Running npx tauri build..."
          # npm run build # Removed as it caused "Missing script: build" error. 
          # Assuming npx tauri build handles frontend or it's prebuilt.
          npx tauri build
          
          APP_NAME_RAW=$(jq -r ".productName" src-tauri/tauri.conf.json)
          # Replace spaces with hyphens for some file system uses if necessary, but .app names can have spaces
          # APP_NAME_FS=$(echo "$APP_NAME_RAW" | sed 's/ /-/g') 
          APP_PATH="src-tauri/target/release/bundle/macos/${APP_NAME_RAW}.app"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: ${APP_PATH} not found after tauri build!"
            ls -R src-tauri/target/release/bundle/macos/
            exit 1
          fi
          echo ".app bundle found at ${APP_PATH}"

          # Ad-hoc sign the .app bundle
          echo "Ad-hoc signing ${APP_PATH}..."
          codesign -s - --force --deep --options runtime "${APP_PATH}"
          echo "Ad-hoc signing complete."

          # Install create-dmg
          echo "Installing create-dmg..."
          # Check if brew is available, otherwise use npm
          if command -v brew &> /dev/null
          then
              brew install create-dmg
          else
              sudo npm install -g create-dmg
          fi
          echo "create-dmg installed."

          # Create the .dmg
          DMG_OUTPUT_DIR="src-tauri/target/release/bundle/dmg"
          mkdir -p "${DMG_OUTPUT_DIR}"
          DMG_NAME="${APP_NAME_RAW}-${{ github.ref_name }}-${{ runner.arch }}.dmg"
          DMG_PATH="${DMG_OUTPUT_DIR}/${DMG_NAME}"
          
          echo "Creating DMG: ${DMG_PATH} from ${APP_PATH}"
          create-dmg \
            --volname "${APP_NAME_RAW} ${{ github.ref_name }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${APP_NAME_RAW}.app" 200 190 \
            --hide-extension "${APP_NAME_RAW}.app" \
            --app-drop-link 600 185 \
            "${DMG_PATH}" \
            "${APP_PATH}"
          
          if [ ! -f "$DMG_PATH" ]; then
            echo "Error: DMG file ${DMG_PATH} not created!"
            exit 1
          fi
          echo "DMG created successfully at ${DMG_PATH}"
          ls -lh "${DMG_PATH}"

          # Upload the .dmg artifact
          echo "Uploading ${DMG_NAME}..."
          gh release upload ${{ github.ref_name }} "${DMG_PATH}" --clobber
          echo "DMG uploaded."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_tauri_android_release:
    name: Build Tauri Android App (Release)
    needs: create_release
    permissions:
      contents: write # Required to upload assets to the release
    runs-on: ubuntu-latest # Android builds are typically done on Linux runners

    env:
      # These secrets must be set in your GitHub repository settings
      TAURI_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      TAURI_ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      TAURI_ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      # TAURI_ANDROID_KEYSTORE_PATH will be set dynamically in a step below

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update version in tauri.conf.json and Cargo.toml
        run: |
          # Extract version from tag (e.g., v1.0.44 -> 1.0.44)
          APP_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "Using App Version: $APP_VERSION"
          
          # Update tauri.conf.json
          if command -v jq &> /dev/null
          then
            jq ".version = \"$APP_VERSION\"" src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
            echo "Updated version in src-tauri/tauri.conf.json to $APP_VERSION using jq"
          else
            sed -i.bak "s/\"version\": \".*\"/\"version\": \"$APP_VERSION\"/" src-tauri/tauri.conf.json
            echo "Updated version in src-tauri/tauri.conf.json to $APP_VERSION using sed (check for .bak file if issues)"
          fi
          
          # Update Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"$APP_VERSION\"/" src-tauri/Cargo.toml
          echo "Updated version in src-tauri/Cargo.toml to $APP_VERSION using sed (check for .bak file if issues)"
        shell: bash

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Specify your project's Node.js version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Android Rust targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # A popular distribution

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          # To install a specific NDK version, include it in the packages list
          packages: 'ndk;25.2.9519653 platform-tools' # NDK r25c and platform-tools
          # This action will also set up a default Android SDK platform and build-tools.
          # It sets ANDROID_HOME and ANDROID_NDK_HOME environment variables.

      - name: Set NDK_HOME globally
        run: |
          echo "NDK_HOME=${ANDROID_NDK_HOME}" >> $GITHUB_ENV
          echo "NDK_HOME has been set globally to: ${ANDROID_NDK_HOME}"

      # tauri-action and tauri-cli's android build process typically handles Java/Android SDK setup.
      # If issues arise, specific setup steps for Java (actions/setup-java) and Android SDK
      # (e.g., android-actions/setup-android or manual installation) might be needed.

      - name: Install Android build dependencies (glib, gtk, pkg-config, libsoup, javascriptcore)
        run: |
          sudo apt-get update
          # Note: libwebkit2gtk-4.1-dev removed as it's likely only needed for desktop builds.
          # If Android build itself fails due to this, it might indicate a more complex issue.
          sudo apt-get install -y libglib2.0-dev libgtk-3-dev pkg-config libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      # PKG_CONFIG_PATH setup removed as it was related to libwebkit2gtk-4.1-dev

      - name: Install frontend dependencies
        run: npm install # Or yarn install, or pnpm install

      - name: Initialize Tauri Android project and Check
        run: |
          echo "Current directory listing (before init):"
          ls -la
          echo "Listing src-tauri/ (before init):"
          ls -la src-tauri/ || echo "src-tauri directory not found before init"
          
          echo "Deleting existing src-tauri/gen/android directory if it exists..."
          rm -rf src-tauri/gen/android
          
          echo "Attempting to create the full expected Java package directory structure manually..."
          mkdir -p src-tauri/gen/android/app/src/main/java/com/libretv/app
          echo "Listing src-tauri/gen/ (after manual deep mkdir and potential rm):"
          ls -la src-tauri/gen/ || echo "src-tauri/gen still not found"
          echo "Listing src-tauri/gen/android/app/src/main/java/com/libretv/app (after manual deep mkdir):"
          ls -la src-tauri/gen/android/app/src/main/java/com/libretv/app || echo "Deep path .../com/libretv/app not found after deep mkdir"
          
          echo "Verifying NDK environment variables before init (NDK_HOME should be globally set now)..."
          echo "ANDROID_NDK_HOME is: $ANDROID_NDK_HOME"
          echo "NDK_HOME is: $NDK_HOME" # This should now reflect the globally set value
          
          echo "Running npm run tauri -- android init -vvv (all output to stdout)..."
          npm run tauri -- android init -vvv 2>&1
          INIT_EXIT_CODE=$?
          echo "tauri android init command finished with exit code: $INIT_EXIT_CODE"
          
          echo "Listing src-tauri/ (after init):"
          ls -la src-tauri/ || echo "src-tauri directory not found after init"
          
          echo "Checking for src-tauri/gen/ and src-tauri/gen/android/ (after init):"
          if [ -d "src-tauri/gen" ]; then
            echo "src-tauri/gen/ directory exists. Listing contents:"
            ls -la src-tauri/gen/
            if [ -d "src-tauri/gen/android" ]; then
              echo "src-tauri/gen/android directory exists. Recursively listing all subdirectories and their contents:"
              find src-tauri/gen/android -ls
              echo "Attempting to list src-tauri/gen/android/app/src/main/java/ specifically:"
              ls -la src-tauri/gen/android/app/src/main/java/ || echo "Path to .../app/src/main/java/ not found after init."
            else
              echo "src-tauri/gen/android directory DOES NOT exist after init (but src-tauri/gen does)."
            fi
          else
            echo "src-tauri/gen/ directory DOES NOT exist after init."
          fi

          if [ $INIT_EXIT_CODE -ne 0 ]; then
            echo "Error: tauri android init command failed with exit code $INIT_EXIT_CODE."
            exit $INIT_EXIT_CODE
          fi

      - name: Setup Android signing (Tauri docs)
        run: |
          echo "Setting up Android signing properties..."
          KEYSTORE_DIR="src-tauri/gen/android"
          mkdir -p "$KEYSTORE_DIR"
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > "$KEYSTORE_DIR/keystore.properties"
          # Aligning with Tauri docs example, using ANDROID_KEY_PASSWORD for the 'password' field
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> "$KEYSTORE_DIR/keystore.properties"
          
          KEYSTORE_FILE_PATH="$RUNNER_TEMP/upload-keystore.jks"
          echo "${{ secrets.ANDROID_SIGNING_KEY_JKS_BASE64 }}" | base64 --decode > "$KEYSTORE_FILE_PATH"
          echo "storeFile=$KEYSTORE_FILE_PATH" >> "$KEYSTORE_DIR/keystore.properties"
          
          echo "keystore.properties created in $KEYSTORE_DIR:"
          cat "$KEYSTORE_DIR/keystore.properties"
          echo "Keystore JKS file decoded to $KEYSTORE_FILE_PATH"
        shell: bash

      - name: Modify build.gradle.kts for signing
        run: |
          chmod +x .github/scripts/configure_gradle_signing.sh
          .github/scripts/configure_gradle_signing.sh
        shell: bash

      - name: Verify Decoded Keystore
        run: |
          KEYSTORE_FILE_PATH="$RUNNER_TEMP/upload-keystore.jks"
          echo "Verifying keystore: $KEYSTORE_FILE_PATH with alias ${{ secrets.ANDROID_KEY_ALIAS }}"
          if [ ! -f "$KEYSTORE_FILE_PATH" ]; then
            echo "Error: Keystore file $KEYSTORE_FILE_PATH not found for verification!"
            exit 1
          fi
          keytool -list -v \
            -keystore "$KEYSTORE_FILE_PATH" \
            -storepass "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            -alias "${{ secrets.ANDROID_KEY_ALIAS }}" \
            -keypass "${{ secrets.ANDROID_KEY_PASSWORD }}"
          echo "Keystore verification command executed successfully."
        shell: bash

      # - name: Build Tauri Android application (Using tauri-action) # Disabled due to NDK_HOME issues with the action
      #   uses: tauri-apps/tauri-action@v0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
      #     NDK_HOME: ${{ env.NDK_HOME }}
      #     # TAURI_ANDROID_KEYSTORE_PATH is set from the previous step via $GITHUB_ENV
      #     # Other TAURI_ANDROID_... variables are set from the job-level env block
      #   with:
      #     tagName: ${{ github.ref_name }}
      #     releaseId: ${{ needs.create_release.outputs.release_id }}
      #     projectPath: '.'
      #     tauriScript: 'tauri android'
      #     args: '-v'

      - name: Build Tauri Android application (Direct Command)
        run: npx tauri android build -v # -v for verbose output, should produce an AAB
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NDK_HOME should be globally available from "Set NDK_HOME globally" step
          # Keystore env vars are set at job level or by previous step

      - name: Get AAB Signature Info using bundletool
        run: |
          # Find the AAB file first
          AAB_DIR_FOR_VERIFY="src-tauri/gen/android/app/build/outputs/bundle"
          AAB_CANDIDATE_1_VERIFY="$AAB_DIR_FOR_VERIFY/universalRelease/app-universal-release.aab"
          AAB_CANDIDATE_2_VERIFY="$AAB_DIR_FOR_VERIFY/release/app-release.aab"

          AAB_TO_VERIFY=""
          if [ -f "$AAB_CANDIDATE_1_VERIFY" ]; then
            AAB_TO_VERIFY="$AAB_CANDIDATE_1_VERIFY"
          elif [ -f "$AAB_CANDIDATE_2_VERIFY" ]; then
            AAB_TO_VERIFY="$AAB_CANDIDATE_2_VERIFY"
          fi
          
          if [ -z "$AAB_TO_VERIFY" ]; then
            echo "Error: AAB file NOT found at expected locations for verification."
            echo "Searched for: $AAB_CANDIDATE_1_VERIFY"
            echo "Searched for: $AAB_CANDIDATE_2_VERIFY"
            echo "Listing contents of $AAB_DIR_FOR_VERIFY and its subdirectories..."
            ls -R "$AAB_DIR_FOR_VERIFY" || echo "Bundle directory $AAB_DIR_FOR_VERIFY not found."
            exit 1
          fi
          
          echo "Getting signature info from AAB: $AAB_TO_VERIFY using bundletool"
          # bundletool.jar is downloaded in a later step, so we need to ensure it's available here
          # For now, let's assume it's already downloaded or adjust the workflow to download it earlier.
          # To be safe, let's add a download step for bundletool here if not present.
          if [ ! -f "bundletool.jar" ]; then
            echo "bundletool.jar not found, downloading..."
            BTOOL_VERSION="1.16.0" # Updated bundletool version
            wget https://github.com/google/bundletool/releases/download/${BTOOL_VERSION}/bundletool-all-${BTOOL_VERSION}.jar -O bundletool.jar
          fi
          echo "Validating AAB: $AAB_TO_VERIFY using bundletool validate"
          java -jar bundletool.jar validate --bundle="$AAB_TO_VERIFY"
          echo "bundletool validate command executed."
        shell: bash

      - name: Check AAB output and set path
        id: check_aab
        run: |
          AAB_DIR="src-tauri/gen/android/app/build/outputs/bundle"
          # AAB filename might vary slightly (e.g., app-release.aab, app-universal-release.aab)
          # We'll search for the AAB file in the expected directory.
          # Common pattern is 'app-release.aab' or 'app-universal-release.aab'
          # The original workflow used 'app-universal-release.aab'
          AAB_CANDIDATE_1="$AAB_DIR/universalRelease/app-universal-release.aab"
          AAB_CANDIDATE_2="$AAB_DIR/release/app-release.aab" # Another common path/name

          if [ -f "$AAB_CANDIDATE_1" ]; then
            AAB_PATH="$AAB_CANDIDATE_1"
          elif [ -f "$AAB_CANDIDATE_2" ]; then
            AAB_PATH="$AAB_CANDIDATE_2"
          else
            echo "Error: AAB file NOT found at expected locations."
            echo "Searched for: $AAB_CANDIDATE_1"
            echo "Searched for: $AAB_CANDIDATE_2"
            echo "Listing contents of $AAB_DIR and its subdirectories..."
            ls -R "$AAB_DIR" || echo "Bundle directory $AAB_DIR not found."
            exit 1
          fi
          
          echo "AAB file found at $AAB_PATH"
          echo "aab_file_path=$AAB_PATH" >> $GITHUB_OUTPUT
          ls -l "$AAB_PATH"
        shell: bash

      - name: Debug before Upload AAB
        run: |
          echo "Attempting to upload AAB artifact."
          echo "AAB Path from check_aab step: ${{ steps.check_aab.outputs.aab_file_path }}"
          ls -lh ${{ steps.check_aab.outputs.aab_file_path }} || echo "AAB file not found at path for ls command."
        shell: bash

      - name: Upload AAB for debugging
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-debug-${{ github.ref_name }}
          path: ${{ steps.check_aab.outputs.aab_file_path }}
          if-no-files-found: error

      - name: Debug after Upload AAB
        run: echo "Upload AAB artifact step finished."
        shell: bash

      - name: Download bundletool
        run: |
          # bundletool.jar might have been downloaded by 'Get AAB Signature Info using bundletool'
          # This step ensures it is present and verifies version if re-downloaded.
          if [ ! -f "bundletool.jar" ]; then
            echo "bundletool.jar not found, downloading..."
            BTOOL_VERSION="1.16.0"
            wget https://github.com/google/bundletool/releases/download/${BTOOL_VERSION}/bundletool-all-${BTOOL_VERSION}.jar -O bundletool.jar
          else
            echo "bundletool.jar already exists."
          fi
          java -jar bundletool.jar version # Verify version
        shell: bash

      - name: Build APKs from AAB using bundletool
        id: build_split_apks
        run: |
          echo "Building Split APKs (relying on AAB signature from Gradle)..."
          java -jar bundletool.jar build-apks --bundle=${{ steps.check_aab.outputs.aab_file_path }} \
            --output=app_bundle_split.apks
          echo "app_bundle_split.apks generated."
          ls -l app_bundle_split.apks
        shell: bash

      - name: Debug before Upload Split APKS
        run: |
          echo "Attempting to upload Split APKS artifact."
          echo "Split APKS Path: ${{ github.workspace }}/app_bundle_split.apks"
          ls -lh ${{ github.workspace }}/app_bundle_split.apks || echo "Split APKS file not found at path for ls command."
        shell: bash

      - name: Upload Split APKS for debugging
        uses: actions/upload-artifact@v4
        with:
          name: android-split-apks-debug-${{ github.ref_name }}
          path: app_bundle_split.apks # This path is relative to GITHUB_WORKSPACE
          if-no-files-found: error
      
      - name: Debug after Upload Split APKS
        run: echo "Upload Split APKS artifact step finished."
        shell: bash

      - name: Build Universal APK from AAB using bundletool
        id: build_universal_apk
        run: |
          echo "Building Universal APK (relying on AAB signature from Gradle)..."
          java -jar bundletool.jar build-apks --bundle=${{ steps.check_aab.outputs.aab_file_path }} \
            --output=app_bundle_universal.apks \
            --mode=universal
          echo "app_bundle_universal.apks generated."
          ls -l app_bundle_universal.apks
        shell: bash

      - name: Debug before Upload Universal APKS
        run: |
          echo "Attempting to upload Universal APKS artifact."
          echo "Universal APKS Path: ${{ github.workspace }}/app_bundle_universal.apks"
          ls -lh ${{ github.workspace }}/app_bundle_universal.apks || echo "Universal APKS file not found at path for ls command."
        shell: bash

      - name: Upload Universal APKS for debugging
        uses: actions/upload-artifact@v4
        with:
          name: android-universal-apks-debug-${{ github.ref_name }}
          path: app_bundle_universal.apks # This path is relative to GITHUB_WORKSPACE
          if-no-files-found: error

      - name: Debug after Upload Universal APKS
        run: echo "Upload Universal APKS artifact step finished."
        shell: bash

      - name: Create directory for extracted APKs, extract, and set paths
        id: extract_apk_files 
        run: |
          echo "Extracting Split APKs..."
          mkdir -p extracted_split_apks
          unzip -o app_bundle_split.apks -d extracted_split_apks
          echo "Contents of extracted_split_apks:"
          ls -R extracted_split_apks/
          
          echo "Locating Split APK files..."
          APK_ARMEABI_V7A=$(find extracted_split_apks -iname "*-armeabi_v7a*.apk" -print -quit)
          APK_ARM64_V8A=$(find extracted_split_apks -iname "*-arm64_v8a*.apk" -print -quit)
          APK_X86=$(find extracted_split_apks \( -iname "*-x86.apk" ! -iname "*-x86_64.apk" \) -print -quit)
          if [ -z "$APK_X86" ]; then # Fallback if specific x86 not found, might pick x86 or x86_64
             APK_X86=$(find extracted_split_apks -iname "*-x86*.apk" ! -iname "*-x86_64*.apk" -print -quit)
          fi
          APK_X86_64=$(find extracted_split_apks -iname "*-x86_64*.apk" -print -quit)

          echo "Path for armeabi-v7a: $APK_ARMEABI_V7A"
          echo "Path for arm64-v8a: $APK_ARM64_V8A"
          echo "Path for x86: $APK_X86"
          echo "Path for x86_64: $APK_X86_64"

          if [ -n "$APK_ARMEABI_V7A" ]; then echo "apk_armeabi_v7a_path=$APK_ARMEABI_V7A" >> $GITHUB_OUTPUT; else echo "::warning::armeabi-v7a APK not found in extracted_split_apks"; echo "apk_armeabi_v7a_path=" >> $GITHUB_OUTPUT; fi
          if [ -n "$APK_ARM64_V8A" ]; then echo "apk_arm64_v8a_path=$APK_ARM64_V8A" >> $GITHUB_OUTPUT; else echo "::warning::arm64-v8a APK not found in extracted_split_apks"; echo "apk_arm64_v8a_path=" >> $GITHUB_OUTPUT; fi
          if [ -n "$APK_X86" ]; then echo "apk_x86_path=$APK_X86" >> $GITHUB_OUTPUT; else echo "::warning::x86 APK not found in extracted_split_apks"; echo "apk_x86_path=" >> $GITHUB_OUTPUT; fi
          if [ -n "$APK_X86_64" ]; then echo "apk_x86_64_path=$APK_X86_64" >> $GITHUB_OUTPUT; else echo "::warning::x86_64 APK not found in extracted_split_apks"; echo "apk_x86_64_path=" >> $GITHUB_OUTPUT; fi
        shell: bash

      - name: Extract Universal APK
        id: extract_universal_apk_file
        run: |
          echo "Extracting Universal APK..."
          mkdir -p extracted_universal_apk
          unzip -oj app_bundle_universal.apks universal.apk -d extracted_universal_apk
          # The -oj options: -o (overwrite without prompting), -j (junk paths, extract only the file to the target dir)
          UNIVERSAL_APK_PATH="extracted_universal_apk/universal.apk"
          if [ -f "$UNIVERSAL_APK_PATH" ]; then
            echo "Universal APK found at $UNIVERSAL_APK_PATH"
            echo "universal_apk_path=$UNIVERSAL_APK_PATH" >> $GITHUB_OUTPUT
            ls -l "$UNIVERSAL_APK_PATH"
          else
            echo "::error::Universal APK (universal.apk) not found after extracting app_bundle_universal.apks"
            # List contents of the apks file for debugging
            unzip -l app_bundle_universal.apks
            exit 1
          fi
          
      - name: Upload armeabi-v7a APK (from bundletool)
        if: steps.extract_apk_files.outputs.apk_armeabi_v7a_path != '' && steps.extract_apk_files.outputs.apk_armeabi_v7a_path != null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.extract_apk_files.outputs.apk_armeabi_v7a_path }}
          asset_name: libretv-${{ github.ref_name }}-android-armeabi-v7a.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload arm64-v8a APK (from bundletool)
        if: steps.extract_apk_files.outputs.apk_arm64_v8a_path != '' && steps.extract_apk_files.outputs.apk_arm64_v8a_path != null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.extract_apk_files.outputs.apk_arm64_v8a_path }}
          asset_name: libretv-${{ github.ref_name }}-android-arm64-v8a.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload x86 APK (from bundletool)
        if: steps.extract_apk_files.outputs.apk_x86_path != '' && steps.extract_apk_files.outputs.apk_x86_path != null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.extract_apk_files.outputs.apk_x86_path }}
          asset_name: libretv-${{ github.ref_name }}-android-x86.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload x86_64 APK (from bundletool)
        if: steps.extract_apk_files.outputs.apk_x86_64_path != '' && steps.extract_apk_files.outputs.apk_x86_64_path != null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.extract_apk_files.outputs.apk_x86_64_path }}
          asset_name: libretv-${{ github.ref_name }}-android-x86_64.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Universal APK (from bundletool)
        if: steps.extract_universal_apk_file.outputs.universal_apk_path != '' && steps.extract_universal_apk_file.outputs.universal_apk_path != null
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.extract_universal_apk_file.outputs.universal_apk_path }}
          asset_name: libretv-${{ github.ref_name }}-android-universal.apk
          asset_content_type: application/vnd.android.package-archive
