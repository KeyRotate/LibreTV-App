name: Release Build & Upload

on:
  push:
    tags:
      - 'v*' # Triggers the workflow on version tags (e.g., v1.0.0, v0.1.2)

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false          # Set to true if you want to manually publish the release
          prerelease: false     # Set to true if this is a pre-release

  build_tauri_desktop:
    name: Build Tauri Desktop Apps
    needs: create_release
    permissions:
      contents: write # Required to upload assets to the release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Specify your project's Node.js version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # You can specify a specific Rust version if needed

      # Install Linux dependencies
      # macOS and Windows dependencies are usually handled by Tauri/system or pre-installed on runners
      - name: Install Linux dependencies (GTK, WebKit, AppIndicator, rsvg, FUSE, GStreamer, packaging tools, etc.)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            librsvg2-bin \
            patchelf \
            libfuse2 \
            desktop-file-utils \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-libav \
            libgdk-pixbuf2.0-bin \
            squashfs-tools \
            file \
            xdg-utils \
            appstream-util \
            ca-certificates \
            curl \
            wget \
            libssl-dev

      - name: Install frontend dependencies
        run: npm install # Or yarn install, or pnpm install

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0 # Uses the v0 major release of the action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }} # For macOS code signing
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} # For macOS code signing
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }} # For macOS code signing
          # APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }} # For macOS notarization
        with:
          tagName: ${{ github.ref_name }} # Used by the action to tag the uploaded assets
          releaseId: ${{ needs.create_release.outputs.release_id }} # Associates build with the created release
          projectPath: '.' # Path to your Tauri project root (where tauri.conf.json is)
          # tauriScript: 'npm run tauri' # Uncomment if your tauri script is not the default 'tauri'
          # distPath: 'src-tauri/target/release/bundle' # Default paths are usually fine
          # iconPath: 'src-tauri/icons/icon.png' # Default paths are usually fine
          # includeDebug: false # Set to true to upload debug symbols
          # updaterJson: true # Set to true to generate and upload updater JSON

          # Note: tauri-action v0 automatically detects and uploads common artifacts:
          # macOS: .app, .dmg
          # Linux: .AppImage, .deb
          # Windows: .msi, .exe (often zipped with debug symbols)

  build_tauri_android_release:
    name: Build Tauri Android App (Release)
    needs: create_release
    permissions:
      contents: write # Required to upload assets to the release
    runs-on: ubuntu-latest # Android builds are typically done on Linux runners

    env:
      # These secrets must be set in your GitHub repository settings
      TAURI_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      TAURI_ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      TAURI_ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      # TAURI_ANDROID_KEYSTORE_PATH will be set dynamically in a step below

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Specify your project's Node.js version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Android Rust targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # A popular distribution

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          # To install a specific NDK version, include it in the packages list
          packages: 'ndk;25.2.9519653 platform-tools' # NDK r25c and platform-tools
          # This action will also set up a default Android SDK platform and build-tools.
          # It sets ANDROID_HOME and ANDROID_NDK_HOME environment variables.

      - name: Set NDK_HOME globally
        run: |
          echo "NDK_HOME=${ANDROID_NDK_HOME}" >> $GITHUB_ENV
          echo "NDK_HOME has been set globally to: ${ANDROID_NDK_HOME}"

      # tauri-action and tauri-cli's android build process typically handles Java/Android SDK setup.
      # If issues arise, specific setup steps for Java (actions/setup-java) and Android SDK
      # (e.g., android-actions/setup-android or manual installation) might be needed.

      - name: Install Android build dependencies (glib, gtk, pkg-config, libsoup, javascriptcore)
        run: |
          sudo apt-get update
          # Note: libwebkit2gtk-4.1-dev removed as it's likely only needed for desktop builds.
          # If Android build itself fails due to this, it might indicate a more complex issue.
          sudo apt-get install -y libglib2.0-dev libgtk-3-dev pkg-config libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      # PKG_CONFIG_PATH setup removed as it was related to libwebkit2gtk-4.1-dev

      - name: Install frontend dependencies
        run: npm install # Or yarn install, or pnpm install

      - name: Initialize Tauri Android project and Check
        run: |
          echo "Current directory listing (before init):"
          ls -la
          echo "Listing src-tauri/ (before init):"
          ls -la src-tauri/ || echo "src-tauri directory not found before init"
          
          echo "Deleting existing src-tauri/gen/android directory if it exists..."
          rm -rf src-tauri/gen/android
          
          echo "Attempting to create the full expected Java package directory structure manually..."
          mkdir -p src-tauri/gen/android/app/src/main/java/com/libretv/app
          echo "Listing src-tauri/gen/ (after manual deep mkdir and potential rm):"
          ls -la src-tauri/gen/ || echo "src-tauri/gen still not found"
          echo "Listing src-tauri/gen/android/app/src/main/java/com/libretv/app (after manual deep mkdir):"
          ls -la src-tauri/gen/android/app/src/main/java/com/libretv/app || echo "Deep path .../com/libretv/app not found after deep mkdir"
          
          echo "Verifying NDK environment variables before init (NDK_HOME should be globally set now)..."
          echo "ANDROID_NDK_HOME is: $ANDROID_NDK_HOME"
          echo "NDK_HOME is: $NDK_HOME" # This should now reflect the globally set value
          
          echo "Running npm run tauri -- android init -vvv (all output to stdout)..."
          npm run tauri -- android init -vvv 2>&1
          INIT_EXIT_CODE=$?
          echo "tauri android init command finished with exit code: $INIT_EXIT_CODE"
          
          echo "Listing src-tauri/ (after init):"
          ls -la src-tauri/ || echo "src-tauri directory not found after init"
          
          echo "Checking for src-tauri/gen/ and src-tauri/gen/android/ (after init):"
          if [ -d "src-tauri/gen" ]; then
            echo "src-tauri/gen/ directory exists. Listing contents:"
            ls -la src-tauri/gen/
            if [ -d "src-tauri/gen/android" ]; then
              echo "src-tauri/gen/android directory exists. Recursively listing all subdirectories and their contents:"
              find src-tauri/gen/android -ls
              echo "Attempting to list src-tauri/gen/android/app/src/main/java/ specifically:"
              ls -la src-tauri/gen/android/app/src/main/java/ || echo "Path to .../app/src/main/java/ not found after init."
            else
              echo "src-tauri/gen/android directory DOES NOT exist after init (but src-tauri/gen does)."
            fi
          else
            echo "src-tauri/gen/ directory DOES NOT exist after init."
          fi

          if [ $INIT_EXIT_CODE -ne 0 ]; then
            echo "Error: tauri android init command failed with exit code $INIT_EXIT_CODE."
            exit $INIT_EXIT_CODE
          fi

      - name: Decode Android Keystore and Set Path
        run: |
          if [ -n "${{ secrets.ANDROID_SIGNING_KEY_JKS_BASE64 }}" ]; then
            echo "ANDROID_SIGNING_KEY_JKS_BASE64 secret is present. Decoding Keystore..."
            echo "${{ secrets.ANDROID_SIGNING_KEY_JKS_BASE64 }}" | base64 --decode > release_keystore.jks
            echo "Keystore decoded to release_keystore.jks"
            echo "TAURI_ANDROID_KEYSTORE_PATH=${{ github.workspace }}/release_keystore.jks" >> $GITHUB_ENV
            echo "TAURI_ANDROID_KEYSTORE_PATH is set to ${{ github.workspace }}/release_keystore.jks"
          else
            echo "ANDROID_SIGNING_KEY_JKS_BASE64 secret is not set or empty. Failing the job."
            exit 1
          fi

      - name: Build Tauri Android application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }} # Explicitly pass ANDROID_NDK_HOME
          NDK_HOME: ${{ env.NDK_HOME }}                 # Explicitly pass NDK_HOME
          # TAURI_ANDROID_KEYSTORE_PATH is set from the previous step via $GITHUB_ENV
          # Other TAURI_ANDROID_... variables are set from the job-level env block
        with:
          tagName: ${{ github.ref_name }}
          releaseId: ${{ needs.create_release.outputs.release_id }}
          projectPath: '.'
          tauriScript: 'tauri android' # Use 'tauri android build' for this job
          args: '-v' # Add verbose flag to get more detailed output from Tauri CLI
          # This ensures only Android targets are built, avoiding desktop bundling issues.

      # - name: Build Tauri Android application (Direct Command) # Temporarily disabled, tauri-action should handle build and upload
      #   run: npx tauri android build -v
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # Keystore env vars are set at job level or by previous step
      #     # Ensure all necessary TAURI_ANDROID_... vars are available
