name: Release Build & Upload

on:
  push:
    tags:
      - 'v*' # Triggers the workflow on version tags (e.g., v1.0.0, v0.1.2)

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false          # Set to true if you want to manually publish the release
          prerelease: false     # Set to true if this is a pre-release

  build_tauri_desktop:
    name: Build Tauri Desktop Apps
    needs: create_release
    permissions:
      contents: write # Required to upload assets to the release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Specify your project's Node.js version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # You can specify a specific Rust version if needed

      # Install Linux dependencies
      # macOS and Windows dependencies are usually handled by Tauri/system or pre-installed on runners
      - name: Install Linux dependencies (GTK, WebKit, AppIndicator, rsvg)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install # Or yarn install, or pnpm install

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0 # Uses the v0 major release of the action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }} # For macOS code signing
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} # For macOS code signing
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }} # For macOS code signing
          # APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }} # For macOS notarization
        with:
          tagName: ${{ github.ref_name }} # Used by the action to tag the uploaded assets
          releaseId: ${{ needs.create_release.outputs.release_id }} # Associates build with the created release
          projectPath: '.' # Path to your Tauri project root (where tauri.conf.json is)
          # tauriScript: 'npm run tauri' # Uncomment if your tauri script is not the default 'tauri'
          # distPath: 'src-tauri/target/release/bundle' # Default paths are usually fine
          # iconPath: 'src-tauri/icons/icon.png' # Default paths are usually fine
          # includeDebug: false # Set to true to upload debug symbols
          # updaterJson: true # Set to true to generate and upload updater JSON

          # Note: tauri-action v0 automatically detects and uploads common artifacts:
          # macOS: .app, .dmg
          # Linux: .AppImage, .deb
          # Windows: .msi, .exe (often zipped with debug symbols)

  build_tauri_android_release:
    name: Build Tauri Android App (Release)
    needs: create_release
    permissions:
      contents: write # Required to upload assets to the release
    runs-on: ubuntu-latest # Android builds are typically done on Linux runners

    env:
      # These secrets must be set in your GitHub repository settings
      TAURI_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      TAURI_ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      TAURI_ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      # TAURI_ANDROID_KEYSTORE_PATH will be set dynamically in a step below

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Specify your project's Node.js version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # tauri-action and tauri-cli's android build process typically handles Java/Android SDK setup.
      # If issues arise, specific setup steps for Java (actions/setup-java) and Android SDK
      # (e.g., android-actions/setup-android or manual installation) might be needed.

      - name: Install frontend dependencies
        run: npm install # Or yarn install, or pnpm install

      - name: Decode Android Keystore and Set Path
        # This step is crucial: it decodes the base64 secret into a .jks file
        # and sets the TAURI_ANDROID_KEYSTORE_PATH environment variable for subsequent steps.
        # Ensure ANDROID_SIGNING_KEY_JKS_BASE64 secret is set and non-empty.
        run: |
          if [ -n "${{ secrets.ANDROID_SIGNING_KEY_JKS_BASE64 }}" ]; then
            echo "ANDROID_SIGNING_KEY_JKS_BASE64 secret is present. Decoding Keystore..."
            echo "${{ secrets.ANDROID_SIGNING_KEY_JKS_BASE64 }}" | base64 --decode > release_keystore.jks
            echo "Keystore decoded to release_keystore.jks"
            echo "TAURI_ANDROID_KEYSTORE_PATH=${{ github.workspace }}/release_keystore.jks" >> $GITHUB_ENV
            echo "TAURI_ANDROID_KEYSTORE_PATH is set to ${{ github.workspace }}/release_keystore.jks"
          else
            echo "ANDROID_SIGNING_KEY_JKS_BASE64 secret is not set or empty. Skipping keystore decoding."
            # Optionally, you might want to fail the job here if the keystore is mandatory for this workflow
            # exit 1 
          fi

      - name: Build Tauri Android application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # TAURI_ANDROID_KEYSTORE_PATH is set from the previous step via $GITHUB_ENV
          # Other TAURI_ANDROID_... variables are set from the job-level env block
        with:
          tagName: ${{ github.ref_name }}
          releaseId: ${{ needs.create_release.outputs.release_id }}
          projectPath: '.'
          # tauri-action should automatically build Android targets (apk,โซ aab)
          # if they are configured in your tauri.conf.json and the environment is set up for signing.
          # No specific 'args' needed here for Android if tauri.conf.json is correctly set up for Android build.
          # It will build all configured targets.
